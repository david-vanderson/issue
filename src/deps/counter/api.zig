/// This file was generated by kickzig.
const std = @import("std");

/// Counter is used to keep track of the number of pointers a message has.
/// It is thread safe.
pub const Counter = struct {
    allocator: std.mem.Allocator,
    mutex: std.Thread.Mutex,
    counter: usize,

    pub fn init(allocator: std.mem.Allocator) !*Counter {
        var self: *Counter = try allocator.create(Counter);
        self.allocator = allocator;
        self.mutex = std.Thread.Mutex{};
        self.counter = 0;
        return self;
    }

    pub fn deinit(self: *Counter) void {
        self.allocator.destroy(self);
    }

    pub fn inc(self: *Counter) usize {
        self.mutex.lock();
        defer self.mutex.unlock();
        self.counter += 1;
        return self.counter;
    }

    pub fn dec(self: *Counter) usize {
        self.mutex.lock();
        defer self.mutex.unlock();
        if (self.counter > 0) {
            self.counter -= 1;
        }
        return self.counter;
    }

    pub fn count(self: *Counter) usize {
        self.mutex.lock();
        defer self.mutex.unlock();
        return self.counter;
    }
};
